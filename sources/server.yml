# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  batch: true
  branches:
    include:   
      - dev
      - staging
      - release
    exclude: 
      - feature/*
          
pr:
  autoCancel: true
  branches:
    include:
      - staging
      - master
      - dev
    exclude:
      - feature/*

variables:  
  srcDir: '$(System.DefaultWorkingDirectory)\sources'
  appDir: '$(srcDir)\Applications'
  solution: '$(srcDir)/*.sln'
  projects: '$(appDir)/Web/SPA/Lite/RH.Apps.Web.SPA.Lite.csproj'
  serverProjectDir: '$(appDir)/Web/SPA/Lite'
  serverProjectName: 'RH.Apps.Web.SPA.Lite'
  clientProjectDir: '$(appDir)/Web/SPA/PWA/Server'
  clientProjectName: 'RH.Apps.Web.SPA.Server'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  isPR: $[eq(variables['Build.Reason'], 'PullRequest')]
  isCI: $[eq(variables['Build.Reason'], 'IndividualCI')]
  isBatchedCI: $[eq(variables['Build.Reason'], 'BatchedCI')]
  targetBranch: $[variables['system.pullRequest.targetBranch']]
  sourceBranch: $[variables['Build.SourceBranchName']]
  isTargetDev: $[eq(variables['targetBranch'], 'dev')]
  isTargetStaging: $[eq(variables['targetBranch'], 'staging')]
  isTargetProd: $[eq(variables['targetBranch'], 'master')]
  isSourceDev: $[eq(variables['sourceBranch'], 'dev')]
  isSourceStaging: $[eq(variables['sourceBranch'], 'staging')]
  isSourceProd: $[eq(variables['sourceBranch'], 'master')]
  Version.Revision.Alpha: $[counter(variables.Version.Revision.Alpha)]
  Version.Revision.Preview: $[counter(variables.Version.Revision.Preview)]
  Version.Revision.Prod: $[counter(variables.Version.Revision.Prod)]
  vmImageName: 'windows-latest'
  testDir: '$(srcDir)\Tests\UnitTests'
  testProjectName: 'RH.Apps.Web.SPA'

stages:
- stage: dev
  displayName: Development  
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['sourceBranch'], 'dev'))
  jobs:
  - job: BuildAndTest
    displayName: 'Build & Test'
    condition: or(eq(variables['isPR'], 'true'), eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      ## needed if running on linux ##
      #- task: UseDotNet@2
        #displayName: 'Install .NET Core SDK 5.0'
        #inputs:
          #packageType: 'sdk'
          #version: '5.0.100'
      #- task: NuGetToolInstaller@1
        #displayName: 'Install NuGet Tools'
        #inputs:
          #checkLatest: true
      #- task: DotNetCoreCLI@2
        #displayName: 'Build project'
        #inputs:
          #command: 'build'
          #projects: '$(serverProjectDir)/$(serverProjectName).csproj'
          #arguments: '--configuration $(buildConfiguration)'
          #feedsToUse: 'select'
          #versioningScheme: 'off'
      ## needed if running on linux ##
      - task: SonarCloudPrepare@1
        displayName: 'Prepare Sonar Analysis'
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'rafsanulhasan'
          scannerMode: 'MSBuild'
          projectKey: 'rafsanulhasan-dev-key'
          projectName: 'rafsanulhasan'
      - task: DotNetCoreCLI@2
        displayName: 'Build & Test'  
        inputs:
          command: test
          projects: '$(testDir)\$(testProjectName).Tests.csproj' 
          arguments: '-c $(buildConfiguration) -s $(srcDir)\.runsettings -l trx;verbosity=detailed -l console;verbosity=detailed -v minimal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(testDir)\$(testProjectName)\TestResults\'
          publishTestResults: false # Optional
          testRunTitle: 'Test Server App'# Optional
          failOnStderr: true      
      - task: CopyFiles@2
        displayName: 'Copy Reports'
        inputs:
          sourceFolder: '$(Agent.TempDirectory)' # Optional
          contents: '**' 
          targetFolder: '$(srcDir)\TestResults'
          cleanTargetFolder: false # Optional
          overWrite: true # Optional
          failOnStderr: true
      - task: SonarCloudAnalyze@1
        displayName: 'Analyze (SonarQube)'  
      - task: CopyFiles@2
        displayName: 'Copy bin files'
        inputs:
          sourceFolder: '$(testDir)\$(testProjectName)\bin\$(buildConfiguration)\net5.0' # Optional
          contents: '*.*' 
          targetFolder: '$(testDir)\$(testProjectName)\bin\$(buildConfiguration)\net5.0\ref'
          cleanTargetFolder: false # Optional
          overWrite: false # Optional
          failOnStderr: true
      - task: VSTest@2
        displayName: 'Test'    
        inputs:
          testSelector: 'testAssemblies' # Options: testAssemblies, testPlan, testRun
          testAssemblyVer2: | # Required when testSelector == TestAssemblies
            **\*tests.dll
            !**\*TestAdapter.dll
            !**\obj\** 
          vsTestVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, toolsInstaller
          runSettingsFile: 'sources\.runsettings' # Optional
          codeCoverageEnabled: true # Optional
          dontDistribute: False # Optional
          testRunTitle: 'Test Server App with VS' # Optional
          platform: '$(buildPlatform)' # Optional
          configuration: '$(buildConfiguration)' # Optional
          publishRunAttachments: true # Optional
          failOnMinTestsNotRun: true # Optional
          minimumExpectedTests: '1' # Optional   
      - task: BuildQualityChecks@7
        displayName: 'Analyze'
        inputs:
          # ===== Warnings Policy Inputs =====
          checkWarnings: true # Optional
          warningFailOption: fixed # Optional; Valid values: build, fixed
          warningThreshold: '5' # Optional
          showStatistics: true # Optional
          allowWarningVariance: false # Optional
          # ===== Code Coverage Policy Inputs =====
          checkCoverage: true # Optional
          coverageFailOption: fixed # Optional; Valid values: build, fixed
          coverageType: blocks # Optional; Valid values: blocks, lines, branches, custom
          #customCoverageType: # Required if coverageType = custom
          treat0of0as100: false # Optional
          coverageThreshold: '1' # Optional
          forceCoverageImprovement: false # Optional
          coverageUpperThreshold: '2' # Optional
          #ignoreDecreaseAboveUpperThreshold: true # Optional
          #useUncoveredElements: false # Optional
          #allowCoverageVariance: false # Optional
          #coverageVariance: '2' # Required if allowCoverageVariance = true
          coverageDeltaType: percentage # Optional; Valid values: absolute, percentage
          coveragePrecision: '2' # Optional
          buildConfiguration: '$(buildConfiguration)' # Optional
          buildPlatform: '$(buildPlatform)' # Optional
          ##explicitFilter: false # Optional
          # ===== Baseline Inputs =====
          includePartiallySucceeded: false # Optional
          # ===== Reporting Inputs =====
          runTitle: Alpha Quality Gates # Optional
          # ===== Advanced Inputs =====
          createBuildIssues: true # Optional  
      - task: SonarCloudPublish@1
        displayName: 'Publish Analysis Report'
        inputs:
          pollingTimeoutSec: '300'  

  - job: PublishAndDeploy
    displayName: 'Publish & Deploy'
    dependsOn: BuildAndTest
    condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: DotNetCoreCLI@2
        displayName: 'Install DNT tool'        
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          command: custom
          custom: tool
          arguments: 'install -g dnt'
      - task: CmdLine@2
        displayName: 'Install DNT'        
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          script: 'npm i -g dotnettools'
      - task: CmdLine@2
        displayName: 'Update project version revesion for preview'  
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          script: 'dnt bump-versions preview "alpha(Version.Revision.Alpha)"'
          failOnStderr: true
      - task: DotNetCoreCLI@2
        displayName: 'Publish'  
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          command: publish
          publishWebProjects: false
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) $(serverProjectDir)/$(serverProjectName).csproj'
          zipAfterPublish: true  
          modifyOutputPath: true
      - task: PublishPipelineArtifact@1
        displayName: 'Publish artifact'  
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'server-app'
      - task: DownloadPipelineArtifact@2
        displayName: 'Download artifact'
        inputs:
          artifact: 'server-app'
          patterns: '**/*.zip'
          path: $(Build.ArtifactStagingDirectory)
      #- task: AzureWebApp@1
        #displayName: 'Deploy to Azure Web App'
        #inputs:
          #azureSubscription: 'Azure for Students (6a7cdb0c-dca4-447f-a508-169c5085f0f0)'
          #appType: webAppLinux
          #appName: 'rafsanulhasan-xyz'
          #package: '$(Build.ArtifactStagingDirectory)/*.zip'

- stage: staging
  displayName: Staging  
  dependsOn: dev
  condition: or(eq(variables['targetBranch'], 'staging'), eq(variables['sourceBranch'], 'staging'))
  jobs:
  - job: BuildAndTest
    displayName: 'Build & Test'
    condition: or(eq(variables['isPR'], 'true'), eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      ## needed if running on linux ##
      #- task: UseDotNet@2
        #displayName: 'Install .NET Core SDK 5.0'
        #inputs:
          #packageType: 'sdk'
          #version: '5.0.100'
      #- task: NuGetToolInstaller@1
        #displayName: 'Install NuGet Tools'
        #inputs:
          #checkLatest: true
      #- task: DotNetCoreCLI@2
        #displayName: 'Build project'
        #inputs:
          #command: 'build'
          #projects: '$(serverProjectDir)/$(serverProjectName).csproj'
          #arguments: '--configuration $(buildConfiguration)'
          #feedsToUse: 'select'
          #versioningScheme: 'off'
      ## needed if running on linux ##
      - task: SonarCloudPrepare@1
        displayName: 'Prepare Sonar Analysis'
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'rafsanulhasan'
          scannerMode: 'MSBuild'
          projectKey: 'rafsanulhasan-dev-key'
          projectName: 'rafsanulhasan'
      - task: DotNetCoreCLI@2
        displayName: 'Build & Test'  
        inputs:
          command: test
          projects: '$(testDir)\$(testProjectName).Tests.csproj' 
          arguments: '-c $(buildConfiguration) -s $(srcDir)\.runsettings -l trx;verbosity=detailed -l console;verbosity=detailed -v minimal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(testDir)\$(testProjectName)\TestResults\'
          publishTestResults: false # Optional
          testRunTitle: 'Test Server App'# Optional
          failOnStderr: true      
      - task: CopyFiles@2
        displayName: 'Copy Reports'
        inputs:
          sourceFolder: '$(Agent.TempDirectory)' # Optional
          contents: '**' 
          targetFolder: '$(srcDir)\TestResults'
          cleanTargetFolder: false # Optional
          overWrite: true # Optional
          failOnStderr: true
      - task: SonarCloudAnalyze@1
        displayName: 'Analyze (SonarQube)'  
      - task: CopyFiles@2
        displayName: 'Copy bin files'
        inputs:
          sourceFolder: '$(testDir)\$(testProjectName)\bin\$(buildConfiguration)\net5.0' # Optional
          contents: '*.*' 
          targetFolder: '$(testDir)\$(testProjectName)\bin\$(buildConfiguration)\net5.0\ref'
          cleanTargetFolder: false # Optional
          overWrite: false # Optional
          failOnStderr: true
      - task: VSTest@2
        displayName: 'Test'    
        inputs:
          testSelector: 'testAssemblies' # Options: testAssemblies, testPlan, testRun
          testAssemblyVer2: | # Required when testSelector == TestAssemblies
            **\*tests.dll
            !**\*TestAdapter.dll
            !**\obj\** 
          vsTestVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, toolsInstaller
          runSettingsFile: 'sources\.runsettings' # Optional
          codeCoverageEnabled: true # Optional
          dontDistribute: False # Optional
          testRunTitle: 'Test Server App with VS' # Optional
          platform: '$(buildPlatform)' # Optional
          configuration: '$(buildConfiguration)' # Optional
          publishRunAttachments: true # Optional
          failOnMinTestsNotRun: true # Optional
          minimumExpectedTests: '1' # Optional   
      - task: BuildQualityChecks@7
        displayName: 'Analyze'
        inputs:
          # ===== Warnings Policy Inputs =====
          checkWarnings: true # Optional
          warningFailOption: fixed # Optional; Valid values: build, fixed
          warningThreshold: '5' # Optional
          showStatistics: true # Optional
          allowWarningVariance: false # Optional
          # ===== Code Coverage Policy Inputs =====
          checkCoverage: true # Optional
          coverageFailOption: fixed # Optional; Valid values: build, fixed
          coverageType: blocks # Optional; Valid values: blocks, lines, branches, custom
          #customCoverageType: # Required if coverageType = custom
          treat0of0as100: false # Optional
          coverageThreshold: '1' # Optional
          forceCoverageImprovement: false # Optional
          coverageUpperThreshold: '2' # Optional
          #ignoreDecreaseAboveUpperThreshold: true # Optional
          #useUncoveredElements: false # Optional
          #allowCoverageVariance: false # Optional
          #coverageVariance: '2' # Required if allowCoverageVariance = true
          coverageDeltaType: percentage # Optional; Valid values: absolute, percentage
          coveragePrecision: '2' # Optional
          buildConfiguration: '$(buildConfiguration)' # Optional
          buildPlatform: '$(buildPlatform)' # Optional
          ##explicitFilter: false # Optional
          # ===== Baseline Inputs =====
          includePartiallySucceeded: false # Optional
          # ===== Reporting Inputs =====
          runTitle: Alpha Quality Gates # Optional
          # ===== Advanced Inputs =====
          createBuildIssues: true # Optional  
      - task: SonarCloudPublish@1
        displayName: 'Publish Analysis Report'
        inputs:
          pollingTimeoutSec: '300'  

  - job: PublishAndDeploy
    displayName: 'Publish & Deploy'
    dependsOn: BuildAndTest
    condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:    
      - task: DotNetCoreCLI@2
        displayName: 'Install DNT tool'        
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          command: custom
          custom: tool
          arguments: 'install -g dnt'
      - task: CmdLine@2
        displayName: 'Install DNT'        
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          script: 'npm i -g dotnettools'
      - task: CmdLine@2
        displayName: 'Update project version revesion for preview'  
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          script: 'dnt bump-versions preview "alpha(Version.Revision.Alpha)"'
          failOnStderr: true
      - task: DotNetCoreCLI@2
        displayName: 'Publish'  
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          command: publish
          publishWebProjects: false
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) $(serverProjectDir)/$(serverProjectName).csproj'
          zipAfterPublish: true  
          modifyOutputPath: true
      - task: PublishPipelineArtifact@1
        displayName: 'Publish artifact'  
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'server-app'
      - task: DownloadPipelineArtifact@2
        displayName: 'Download artifact'
        inputs:
          artifact: 'server-app'
          patterns: '**/*.zip'
          path: $(Build.ArtifactStagingDirectory)
      #- task: AzureWebApp@1
        #displayName: 'Deploy to Azure Web App'
        #inputs:
          #azureSubscription: 'Azure for Students (6a7cdb0c-dca4-447f-a508-169c5085f0f0)'
          #appType: webAppLinux
          #appName: 'rafsanulhasan-xyz'
          #package: '$(System.DefaultWorkingDirectory)\**\*.zip'

- stage: prod
  displayName: Production
  dependsOn: staging
  condition: or(eq(variables['targetBranch'], 'master'), eq(variables['sourceBranch'], 'master'))
  jobs:
  - job: BuildAndTest
    displayName: 'Build & Test'
    condition: or(eq(variables['isPR'], 'true'), eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      ## needed if running on linux ##
      #- task: UseDotNet@2
        #displayName: 'Install .NET Core SDK 5.0'
        #inputs:
          #packageType: 'sdk'
          #version: '5.0.100'
      #- task: NuGetToolInstaller@1
        #displayName: 'Install NuGet Tools'
        #inputs:
          #checkLatest: true
      #- task: DotNetCoreCLI@2
        #displayName: 'Build project'
        #inputs:
          #command: 'build'
          #projects: '$(serverProjectDir)/$(serverProjectName).csproj'
          #arguments: '--configuration $(buildConfiguration)'
          #feedsToUse: 'select'
          #versioningScheme: 'off'
      ## needed if running on linux ##
      - task: SonarCloudPrepare@1
        displayName: 'Prepare Sonar Analysis'
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'rafsanulhasan'
          scannerMode: 'MSBuild'
          projectKey: 'rafsanulhasan-dev-key'
          projectName: 'rafsanulhasan'
      - task: DotNetCoreCLI@2
        displayName: 'Build & Test'  
        inputs:
          command: test
          projects: '$(testDir)\$(testProjectName).Tests.csproj' 
          arguments: '-c $(buildConfiguration) -s $(srcDir)\.runsettings -l trx;verbosity=detailed -l console;verbosity=detailed -v minimal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(testDir)\$(testProjectName)\TestResults\'
          publishTestResults: false # Optional
          testRunTitle: 'Test Server App'# Optional
          failOnStderr: true      
      - task: CopyFiles@2
        displayName: 'Copy Reports'
        inputs:
          sourceFolder: '$(Agent.TempDirectory)' # Optional
          contents: '**' 
          targetFolder: '$(srcDir)\TestResults'
          cleanTargetFolder: false # Optional
          overWrite: true # Optional
          failOnStderr: true
      - task: SonarCloudAnalyze@1
        displayName: 'Analyze (SonarQube)'  
      - task: CopyFiles@2
        displayName: 'Copy bin files'
        inputs:
          sourceFolder: '$(testDir)\$(testProjectName)\bin\$(buildConfiguration)\net5.0' # Optional
          contents: '*.*' 
          targetFolder: '$(testDir)\$(testProjectName)\bin\$(buildConfiguration)\net5.0\ref'
          cleanTargetFolder: false # Optional
          overWrite: false # Optional
          failOnStderr: true
      - task: VSTest@2
        displayName: 'Test'    
        inputs:
          testSelector: 'testAssemblies' # Options: testAssemblies, testPlan, testRun
          testAssemblyVer2: | # Required when testSelector == TestAssemblies
            **\*tests.dll
            !**\*TestAdapter.dll
            !**\obj\** 
          vsTestVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, toolsInstaller
          runSettingsFile: 'sources\.runsettings' # Optional
          codeCoverageEnabled: true # Optional
          dontDistribute: False # Optional
          testRunTitle: 'Test Server App with VS' # Optional
          platform: '$(buildPlatform)' # Optional
          configuration: '$(buildConfiguration)' # Optional
          publishRunAttachments: true # Optional
          failOnMinTestsNotRun: true # Optional
          minimumExpectedTests: '1' # Optional   
      - task: BuildQualityChecks@7
        displayName: 'Analyze'
        inputs:
          # ===== Warnings Policy Inputs =====
          checkWarnings: true # Optional
          warningFailOption: fixed # Optional; Valid values: build, fixed
          warningThreshold: '5' # Optional
          showStatistics: true # Optional
          allowWarningVariance: false # Optional
          # ===== Code Coverage Policy Inputs =====
          checkCoverage: true # Optional
          coverageFailOption: fixed # Optional; Valid values: build, fixed
          coverageType: blocks # Optional; Valid values: blocks, lines, branches, custom
          #customCoverageType: # Required if coverageType = custom
          treat0of0as100: false # Optional
          coverageThreshold: '1' # Optional
          forceCoverageImprovement: false # Optional
          coverageUpperThreshold: '2' # Optional
          #ignoreDecreaseAboveUpperThreshold: true # Optional
          #useUncoveredElements: false # Optional
          #allowCoverageVariance: false # Optional
          #coverageVariance: '2' # Required if allowCoverageVariance = true
          coverageDeltaType: percentage # Optional; Valid values: absolute, percentage
          coveragePrecision: '2' # Optional
          buildConfiguration: '$(buildConfiguration)' # Optional
          buildPlatform: '$(buildPlatform)' # Optional
          ##explicitFilter: false # Optional
          # ===== Baseline Inputs =====
          includePartiallySucceeded: false # Optional
          # ===== Reporting Inputs =====
          runTitle: Alpha Quality Gates # Optional
          # ===== Advanced Inputs =====
          createBuildIssues: true # Optional  
      - task: SonarCloudPublish@1
        displayName: 'Publish Analysis Report'
        inputs:
          pollingTimeoutSec: '300'      

  - job: PublishAndDeploy
    displayName: 'Publish & Deploy'
    dependsOn: BuildAndTest
    condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:   
      - task: DotNetCoreCLI@2
        displayName: 'Install DNT tool'        
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          command: custom
          custom: tool
          arguments: 'install -g dnt'
      - task: CmdLine@2
        displayName: 'Install DNT'        
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          script: 'npm i -g dotnettools'
      - task: CmdLine@2
        displayName: 'Update project version revesion for preview'  
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          script: 'dnt bump-versions preview "alpha(Version.Revision.Alpha)"'
          failOnStderr: true
      - task: DotNetCoreCLI@2
        displayName: 'Publish'  
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          command: publish
          publishWebProjects: false
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) $(serverProjectDir)/$(serverProjectName).csproj'
          zipAfterPublish: true  
          modifyOutputPath: true
      - task: PublishPipelineArtifact@1
        displayName: 'Publish artifact'  
        condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'server-app'
      - task: DownloadPipelineArtifact@2
        displayName: 'Download artifact'
        inputs:
          artifact: 'server-app'
          patterns: '**/*.zip'
          path: $(Build.ArtifactStagingDirectory)
      #- task: AzureWebApp@1
        #displayName: 'Deploy to Azure Web App'
        #inputs:
          #azureSubscription: 'Azure for Students (6a7cdb0c-dca4-447f-a508-169c5085f0f0)'
          #appType: webAppLinux
          #appName: 'rafsanulhasan-xyz'
          #package: '$(System.DefaultWorkingDirectory)\**\*.zip'
      #- task: AzureWebApp@1
        #displayName: 'Deploy to Azure Web App'
        #inputs:
          #azureSubscription: 'Azure for Students (6a7cdb0c-dca4-447f-a508-169c5085f0f0)'
          #appType: webAppLinux
          #appName: 'rafsanulhasan-xyz'
          #package: '$(System.DefaultWorkingDirectory)\**\*.zip'