# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  batch: true
  branches:
    include:   
      - dev
      - staging
      - release
    exclude: 
      - feature/*
          
pr:
  autoCancel: "false"
  branches:
    include:
      - staging
      - master
      - dev
    exclude:
      - feature/*

pool:
  vmImage: 'windows-2019'

variables:
  solution: '**/*.sln'
  projects: 'sources/Applications/Web/SPA/Server/RH.Apps.Web.SPA.Lite.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  isPR: $[eq(variables.Build.Reason, 'PullRequest')]
  isCI: $[eq(variables.Build.Reason, 'IndividualCI')]
  targetBranch: $(system.pullRequest.targetBranch)
  sourceBranch: $(system.Build.SourceBranch)
  #isTargetDev: $[eq(variables['system']['pullRequest']['targetBranch'], 'dev')]
  #isTargetStaging: $[eq(variables['system']['pullRequest']['targetBranch'], 'staging')]
  #isTargetProd: $[eq(variables['system']['pullRequest']['targetBranch'], 'master')]
  Version.Revision.Alpha: $[counter(variables.Version.Revision.Alpha)]
  Version.Revision.Preview: $[counter(variables.Version.Revision.Preview)]
  Version.Revision.Prod: $[counter(variables.Version.Revision.Prod)]

steps:

- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 5.0'
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['targetBranch'], 'staging'), eq(variables['targetBranch'], 'master'))
  inputs:
    packageType: 'sdk'
    version: '5.0.100'

- task: CmdLine@2
  displayName: 'Install DNT'
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['targetBranch'], 'staging'), eq(variables['targetBranch'], 'master'))
  inputs:
    script: 'npm i -g dotnettools'

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet Tools'
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['targetBranch'], 'staging'), eq(variables['targetBranch'], 'master'))
  inputs:
    checkLatest: true
    
- task: CmdLine@2
  displayName: 'Update project version revesion for preview'
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['targetBranch'], 'staging'), eq(variables['targetBranch'], 'master'))
  inputs:
    script: 'dnt bump-versions preview "preview$(Version.Revision.Alpha)"'
    failOnStderr: true
    
- task: CmdLine@2
  displayName: 'Update project version revesion for preview'
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['targetBranch'], 'staging'), eq(variables['targetBranch'], 'master'))
  inputs:
    script: 'dnt bump-versions preview "preview$(Version.Revision.Preview)"'
    failOnStderr: true
    
- task: CmdLine@2
  displayName: 'Update project version revesion for release'
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['targetBranch'], 'staging'), eq(variables['targetBranch'], 'master'))
  inputs:
    script: 'dnt bump-versions revision "$(Version.Revision.Prod)"'
    failOnStderr: true
    
- task: DotNetCoreCLI@2
  displayName: 'Build project using dotnet cli'
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['targetBranch'], 'staging'), eq(variables['targetBranch'], 'master'))
  inputs:
    command: 'build'
    projects: '$(projects)'
    arguments: '--configuration $(BuildConfiguration)'
    feedsToUse: 'select'
    versioningScheme: 'off'

#- task: MSBuild@1
  #displayName: 'Build solution using msbuild'
  #inputs:
    #solution: '$(solution)'  
    #msbuildArchitecture: 'x64'
    #platform: 'Any CPU'
    #restoreNugetPackages: true # Optional
    #configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publish project using dotnet cli'
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['targetBranch'], 'staging'), eq(variables['targetBranch'], 'master'))
  inputs:
    command: publish
    publishWebProjects: false
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) $(projects)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['targetBranch'], 'staging'), eq(variables['targetBranch'], 'master'))
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'Drop'
    publishLocation: 'Container'

- task: AzureWebApp@1
  displayName: 'Azure Web App'
  condition: or(eq(variables['sourceBranch'], 'dev'), eq(variables['sourceBranch'], 'staging'), eq(variables['sourceBranch'], 'master'))
  inputs:
    azureSubscription: 'Azure for Students (6a7cdb0c-dca4-447f-a508-169c5085f0f0)'
    appType: webAppLinux
    appName: 'rafsanulhasan-xyz'
    package: '$(System.DefaultWorkingDirectory)\**\*.zip'
