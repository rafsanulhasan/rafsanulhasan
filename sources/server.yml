# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  batch: true
  branches:
    include:   
      - dev
      - staging
      - release
    exclude: 
      - feature/*
          
pr:
  autoCancel: false
  branches:
    include:
      - staging
      - master
      - dev
    exclude:
      - feature/*

variables:
  solution: '**/*.sln'
  projects: 'sources/Applications/Web/SPA/Server/RH.Apps.Web.SPA.Lite.csproj'
  serverProjectDir: 'sources/Applications/Web/SPA/Server'
  serverProjectName: 'RH.Apps.Web.SPA.Lite'
  clientProjectDir: 'sources/Applications/Web/SPA/Client'
  clientProjectName: 'RH.Apps.Web.SPA'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  isPR: $[eq(variables['Build.Reason'], 'PullRequest')]
  isCI: $[eq(variables['Build.Reason'], 'IndividualCI')]
  isBatchedCI: $[eq(variables['Build.Reason'], 'BatchedCI')]
  targetBranch: $[variables['system.pullRequest.targetBranch']]
  sourceBranch: $[variables['Build.SourceBranchName']]
  isTargetDev: $[eq(variables['targetBranch'], 'dev')]
  isTargetStaging: $[eq(variables['targetBranch'], 'staging')]
  isTargetProd: $[eq(variables['targetBranch'], 'master')]
  isSourceDev: $[eq(variables['sourceBranch'], 'dev')]
  isSourceStaging: $[eq(variables['sourceBranch'], 'staging')]
  isSourceProd: $[eq(variables['sourceBranch'], 'master')]
  Version.Revision.Alpha: $[counter(variables.Version.Revision.Alpha)]
  Version.Revision.Preview: $[counter(variables.Version.Revision.Preview)]
  Version.Revision.Prod: $[counter(variables.Version.Revision.Prod)]
  vmImageName: 'windows-latest'
  testDir": '$(System.DefaultWorkingDirectory)/sources/Tests'
  testProjectName: 'RH.Apps.Web.SPA.Lite.Tests'

stages:
- stage: dev
  displayName: Development  
  condition: or(eq(variables['targetBranch'], 'dev'), eq(variables['sourceBranch'], 'dev'))
  jobs:
  - job: BuildAndTest
    displayName: 'Build And Test'
    condition: or(eq(variables['isPR'], 'true'), eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core SDK 5.0'
        inputs:
          packageType: 'sdk'
          version: '5.0.100'
      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet Tools'
        inputs:
          checkLatest: true
      - task: DotNetCoreCLI@2
        displayName: 'Build project'
        inputs:
          command: 'build'
          projects: '$(serverProjectDir)/$(serverProjectName).csproj'
          arguments: '--configuration $(BuildConfiguration)'
          feedsToUse: 'select'
          versioningScheme: 'off'
      #- task: MSBuild@1
         #displayName: 'Build solution using msbuild'
         #inputs:
         #solution: '$(solution)'  
         #msbuildArchitecture: 'x64'
         #platform: 'Any CPU'
         #restoreNugetPackages: true # Optional
         #configuration: '$(buildConfiguration)'
      - task: DotNetCoreCLI@2
        displayName: 'Test'        
        inputs:
          command: test
          projects: '**/*Tests/*Tests.csproj'
          arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
      - task: VSTest@2
        displayName: 'Test with VS'    
        inputs:
         testSelector: 'testAssemblies' # Options: testAssemblies, testPlan, testRun
         testAssemblyVer2: | # Required when testSelector == TestAssemblies
           **\*test*.dll
           !**\*TestAdapter.dll
           !**\obj\** 
         #tcmTestRun: '$(test.RunId)' # Optional
         searchFolder: '**/*Tests/' 
         #testFiltercriteria: # Optional
         #runOnlyImpactedTests: False # Optional
         #runAllTestsAfterXBuilds: '50' # Optional
         #uiTests: false # Optional
         #vstestLocationMethod: 'version' # Optional. Options: version, location
         vsTestVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, toolsInstaller
         #vstestLocation: # Optional
         #runSettingsFile: # Optional
         #overrideTestrunParameters: # Optional
         #pathtoCustomTestAdapters: # Optional
         #runInParallel: False # Optional
         #runTestsInIsolation: False # Optional
         codeCoverageEnabled: true # Optional
         #otherConsoleOptions: # Optional
         #distributionBatchType: 'basedOnTestCases' # Optional. Options: basedOnTestCases, basedOnExecutionTime, basedOnAssembly
         #batchingBasedOnAgentsOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customBatchSize
         #customBatchSizeValue: '10' # Required when distributionBatchType == BasedOnTestCases && BatchingBasedOnAgentsOption == CustomBatchSize
         #batchingBasedOnExecutionTimeOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customTimeBatchSize
         #customRunTimePerBatchValue: '60' # Required when distributionBatchType == BasedOnExecutionTime && BatchingBasedOnExecutionTimeOption == CustomTimeBatchSize
         dontDistribute: True # Optional
         testRunTitle: ServerAppTest # Optional
         #platform: # Optional
         configuration: '$(buildConfuguration)' # Optional
         #publishRunAttachments: true # Optional
         #failOnMinTestsNotRun: false # Optional
         #minimumExpectedTests: '1' # Optional
         #diagnosticsEnabled: false # Optional
         #collectDumpOn: 'onAbortOnly' # Optional. Options: onAbortOnly, always, never
         #rerunFailedTests: False # Optional
         #rerunType: 'basedOnTestFailurePercentage' # Optional. Options: basedOnTestFailurePercentage, basedOnTestFailureCount
         #rerunFailedThreshold: '30' # Optional
         #rerunFailedTestCasesMaxLimit: '5' # Optional
         #rerunMaxAttempts: '3' # Optional

  - job: PublishAndDeploy
    displayName: 'Publish and Deploy'
    dependsOn: BuildAndTest
    condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: CmdLine@2
        displayName: 'Install DNT'
        inputs:
          script: 'npm i -g dotnettools'
      - task: CmdLine@2
        displayName: 'Update project version revesion for preview'
        inputs:
          script: 'dnt bump-versions preview "alpha(Version.Revision.Alpha)"'
          failOnStderr: true
      - task: DotNetCoreCLI@2
        displayName: 'Publish'
        inputs:
          command: publish
          publishWebProjects: false
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) $(serverProjectDir)/$(serverProjectName).csproj'
          #modifyOutputPath: false
          zipAfterPublish: true  
      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'Drop'
          publishLocation: 'Container'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download artifact'
        inputs:
          artifactName: drop    
          downloadPath: '$(System.DefaultWorkingDirectory)'
      - task: AzureWebApp@1
        displayName: 'Deploy to Azure Web App'
        inputs:
          azureSubscription: 'Azure for Students (6a7cdb0c-dca4-447f-a508-169c5085f0f0)'
          appType: webAppLinux
          appName: 'rafsanulhasan-xyz'
          package: '$(System.DefaultWorkingDirectory)\**\*.zip'

- stage: staging
  displayName: Staging  
  dependsOn: dev
  condition: or(eq(variables['targetBranch'], 'staging'), eq(variables['sourceBranch'], 'staging'))
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test'
    condition: or(eq(variables['isPR'], 'true'), eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core SDK 5.0'
        inputs:
          packageType: 'sdk'
          version: '5.0.100'
      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet Tools'
        inputs:
          checkLatest: true
      - task: DotNetCoreCLI@2
        displayName: 'Build project'
        inputs:
          command: 'build'
          projects: '$(serverProjectDir)/$(serverProjectName).csproj'
          arguments: '--configuration $(BuildConfiguration)'
          feedsToUse: 'select'
          versioningScheme: 'off'
      #- task: MSBuild@1
         #displayName: 'Build solution using msbuild'
         #inputs:
         #solution: '$(solution)'  
         #msbuildArchitecture: 'x64'
         #platform: 'Any CPU'
         #restoreNugetPackages: true # Optional
         #configuration: '$(buildConfiguration)'

  - job: PublishAndDeploy
    displayName: 'Publish and Deploy'
    dependsOn: BuildAndTest
    condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: CmdLine@2
        displayName: 'Install DNT'
        inputs:
          script: 'npm i -g dotnettools'
      - task: CmdLine@2
        displayName: 'Update project version revesion for preview'
        inputs:
          script: 'dnt bump-versions preview "beta(Version.Revision.Preview)"'
          failOnStderr: true
      - task: DotNetCoreCLI@2
        displayName: 'Publish'
        inputs:
          command: publish
          publishWebProjects: false
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) $(serverProjectDir)/$(serverProjectName).csproj'
          #modifyOutputPath: false
          zipAfterPublish: true  
      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'Drop'
          publishLocation: 'Container'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download artifact'
        inputs:
          artifactName: drop    
          downloadPath: '$(System.DefaultWorkingDirectory)'
      - task: AzureWebApp@1
        displayName: 'Deploy to Azure Web App'
        inputs:
          azureSubscription: 'Azure for Students (6a7cdb0c-dca4-447f-a508-169c5085f0f0)'
          appType: webAppLinux
          appName: 'rafsanulhasan-xyz'
          package: '$(System.DefaultWorkingDirectory)\**\*.zip'

- stage: prod
  displayName: Production
  dependsOn: staging
  condition: or(eq(variables['targetBranch'], 'master'), eq(variables['sourceBranch'], 'master'))
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test'
    condition: or(eq(variables['isPR'], 'true'), eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core SDK 5.0'
        inputs:
          packageType: 'sdk'
          version: '5.0.100'
      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet Tools'
        inputs:
          checkLatest: true
      - task: DotNetCoreCLI@2
        displayName: 'Build project'
        inputs:
          command: 'build'
          projects: '$(serverProjectDir)/$(serverProjectName).csproj'
          arguments: '--configuration $(BuildConfiguration)'
          feedsToUse: 'select'
          versioningScheme: 'off'
      #- task: MSBuild@1
         #displayName: 'Build solution using msbuild'
         #inputs:
         #solution: '$(solution)'  
         #msbuildArchitecture: 'x64'
         #platform: 'Any CPU'
         #restoreNugetPackages: true # Optional
         #configuration: '$(buildConfiguration)'

  - job: PublishAndDeploy
    displayName: 'Publish and Deploy'
    dependsOn: BuildAndTest
    condition: or(eq(variables['isCI'], 'true'), eq(variables['isBatchedCI'], 'true'))
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: CmdLine@2
        displayName: 'Install DNT'
        inputs:
          script: 'npm i -g dotnettools'
      - task: CmdLine@2
        displayName: 'Update project version revesion for preview'
        inputs:
          script: 'dnt bump-versions preview "$(Version.Revision.Prod)"'
          failOnStderr: true
      - task: DotNetCoreCLI@2
        displayName: 'Publish'
        inputs:
          command: publish
          publishWebProjects: false
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) $(serverProjectDir)/$(serverProjectName).csproj'
          #modifyOutputPath: false
          zipAfterPublish: true  
      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'Drop'
          publishLocation: 'Container'
      - task: DownloadBuildArtifacts@0
        displayName: 'Download artifact'
        inputs:
          artifactName: drop    
          downloadPath: '$(System.DefaultWorkingDirectory)'
      - task: AzureWebApp@1
        displayName: 'Deploy to Azure Web App'
        inputs:
          azureSubscription: 'Azure for Students (6a7cdb0c-dca4-447f-a508-169c5085f0f0)'
          appType: webAppLinux
          appName: 'rafsanulhasan-xyz'
          package: '$(System.DefaultWorkingDirectory)\**\*.zip'